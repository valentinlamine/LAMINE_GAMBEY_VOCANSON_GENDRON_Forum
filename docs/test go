package main

import (
	"encoding/json"
	"fmt"
	utilities "forum/Utilities"
	_ "github.com/go-sql-driver/mysql"
	"github.com/julienschmidt/httprouter"
	"github.com/r3labs/sse/v2"
	"html/template"
	"net/http"
	"os"
	"time"
)

var db = utilities.OpenDB()

func main() {
	// fmt.Println(utilities.MessagesGetAllTopic(db, 1))
	/*
		//statics files
		r := mux.NewRouter()
		r.PathPrefix("/assets/").Handler(http.StripPrefix("/assets/", http.FileServer(http.Dir("./assets"))))
		r.PathPrefix("/CSS/").Handler(http.StripPrefix("/CSS/", http.FileServer(http.Dir("./CSS"))))
		r.PathPrefix("/JS/").Handler(http.StripPrefix("/JS/", http.FileServer(http.Dir("./JS"))))

		//handle routing
		r.HandleFunc("/", IndexHandler)
		//r.HandleFunc("/topic/{id}", utilities.TopicHandler)
		r.HandleFunc("/termsofservice", TermsOfServiceHandler)
		r.HandleFunc("/privacypolicy", PrivacyPolicyHandler)
		r.HandleFunc("/test", TestHandler)


		fmt.Println("server is running on port 8080 : http://localhost:8080")
		if err := http.ListenAndServe(":8080", r); err != nil {
			log.Fatal(err)
		}
	*/

	// test
	router := httprouter.New()
	timer := sse.New()
	router.ServeFiles("/assets/*filepath", http.Dir("./assets"))
	router.ServeFiles("/CSS/*filepath", http.Dir("./CSS"))
	router.ServeFiles("/JS/*filepath", http.Dir("./JS"))

	router.GET("/", serveHomePage)

	router.POST("/get_time", getTime)

	router.Handler("GET", "/time", timer)

	err := http.ListenAndServe(":8080", router)
	if err != nil {
		fmt.Println("Problem starting web server: " + err.Error())
		os.Exit(-1)
	}
}

func serveHomePage(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	tmpl := template.Must(template.ParseFiles("test.html"))
	tmpl.Execute(w, nil)
}

func getTime(writer http.ResponseWriter, request *http.Request, params httprouter.Params) {
	var data TimeDataInput
	err := json.NewDecoder(request.Body).Decode(&data)
	if err != nil {
		fmt.Println(err.Error())
		var responseData TimeDataOutput
		responseData.Result = "nok"
		responseData.Text = "problem with user json data"
		writer.Header().Set("Content-Type", "application/json")
		_ = json.NewEncoder(writer).Encode(responseData)
		return
	}
	fmt.Println(data.Name)
	fmt.Println(data.Name)
	timer := time.Now()
	time.Sleep(1 * time.Second)
	end := time.Since(timer)
	fmt.Println("processing takes: " + end.String())
	var responseData TimeDataOutput
	responseData.Result = "ok"
	responseData.Text = "everything went smooth"
	responseData.Time = time.Now().Format("02/01/2006, 15:04:05")
	responseData.Duration = end.String()
	writer.Header().Set("Content-Type", "application/json")
	_ = json.NewEncoder(writer).Encode(responseData)
	return
}

type TimeDataInput struct {
	Name string
	Time string
}

type TimeDataOutput struct {
	Result   string
	Text     string
	Time     string
	Duration string
}

/*
func GetData() []utilities.TopicSortedDrop {
	var data []utilities.TopicSortedDrop
	var resultAlgoPopular = utilities.GetTopicsSorted(db)
	// fmt.Println(utilities.GetTopicsSorted(db))
	for i := 0; i != len(resultAlgoPopular); i++ {
		//fmt.Println(resultAlgoPopular[i].Topic_id)
		data = append(data, utilities.GetTopicById(db, resultAlgoPopular[i].Topic_id))
	}
	return data
}

func generateTemplate(templateName string, filepaths []string) *template.Template {
	tmpl, err := template.New(templateName).ParseFiles(filepaths...)
	// Error check:
	if err != nil {
		panic(err)
	}
	return tmpl
}

func IndexHandler(w http.ResponseWriter, r *http.Request) {
	var data utilities.Data
	data.Data = GetData()
	// *Generates and executes templates:
	tmpl := generateTemplate("index.html", []string{"index.html", "template/header.html", "template/headerConnect.html", "template/leftnavbar.html", "template/topic.html"})
	//tmpl.ExecuteTemplate(w, "login", data)
	data = utilities.Data{
		Data:     GetData(),
		Token:    utilities.GetLoginRegister(r, w, db),
		IsLogged: utilities.GetLogoutInfo(r, w),
	}

	err := tmpl.Execute(w, data)
	if err != nil {
		fmt.Println("err : ", err)
	}
}

func TermsOfServiceHandler(w http.ResponseWriter, r *http.Request) {
	var data utilities.Data
	data.Data = GetData()
	// *Generates and executes templates:
	tmpl := generateTemplate("termsofservice.html", []string{"termsofservice.html", "template/header.html", "template/headerConnect.html", "template/leftnavbar.html"})
	//tmpl.ExecuteTemplate(w, "login", data)
	data = utilities.Data{
		Data:     GetData(),
		Token:    utilities.GetLoginRegister(r, w, db),
		IsLogged: utilities.GetLogoutInfo(r, w),
	}

	err := tmpl.Execute(w, data)
	if err != nil {
		fmt.Println("err : ", err)
	}
}

func PrivacyPolicyHandler(w http.ResponseWriter, r *http.Request) {
	var data utilities.Data
	data.Data = GetData()
	// *Generates and executes templates:
	tmpl := generateTemplate("privacypolicy.html", []string{"privacypolicy.html", "template/header.html", "template/headerConnect.html", "template/leftnavbar.html"})
	//tmpl.ExecuteTemplate(w, "login", data)
	data = utilities.Data{
		Data:     GetData(),
		Token:    utilities.GetLoginRegister(r, w, db),
		IsLogged: utilities.GetLogoutInfo(r, w),
	}

	err := tmpl.Execute(w, data)
	if err != nil {
		fmt.Println("err : ", err)
	}
}
*/























<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="CSS/style.css">
    <link rel="stylesheet" href="CSS/fonts.css">
    <title>Upit</title>
</head>
<body>
    <div class="not-header">
        <div class="left-navbar">
        </div>
        <div class="content">
            <h1>Test page</h1>
            <h1>Webpage generated at: </h1>
            <h1 id="test-title">It is working</h1>
            <button id="test-button">Press me</button>
            <br>
            <br>
            <label for="name">Frontend to backend</label>
            <br>
            <input type="text" id="name" placeholder="please insert your name..">
            <button id="ask-button">Ask for data</button>
            <h3 id="ask-time"></h3>
            <script>
                const testButton = document.getElementById("test-button")
                const buttonTime = document.getElementById("button-time")
                const name = document.getElementById("name")
                const askButton = document.getElementById("ask-button")
                const askTime = document.getElementById("ask-time")

                askButton.addEventListener("click", function () {
                    askTime.textContent = "new button clicked"
                })

                askButton.addEventListener("click", function () {
                    let data = {
                        Name: name.value,
                        Time: new Date().toLocaleString("en-IE"),
                    };
                    fetch("/get_time", {
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        },
                        method: "POST",
                        body: JSON.stringify(data)
                    }).then((response) => {
                        response.text().then(function (data) {
                            let result = JSON.parse(data);
                            console.log(result)
                            console.log(result)
                            askTime.textContent = "Backend processing took " + result["Duration"] + " and ended at " + result["Time"]
                        });
                    }).catch((error) => {
                        console.log(error)
                    });
                })
            </script>
        </div>
    </div>
</body>
</html>